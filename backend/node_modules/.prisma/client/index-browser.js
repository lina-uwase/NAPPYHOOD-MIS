
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  phone: 'phone',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  profilePicture: 'profilePicture'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  gender: 'gender',
  location: 'location',
  district: 'district',
  province: 'province',
  phone: 'phone',
  email: 'email',
  birthDay: 'birthDay',
  birthMonth: 'birthMonth',
  birthYear: 'birthYear',
  loyaltyPoints: 'loyaltyPoints',
  totalSpent: 'totalSpent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  lastSale: 'lastSale',
  saleCount: 'saleCount',
  parentId: 'parentId',
  isDependent: 'isDependent'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description',
  singlePrice: 'singlePrice',
  combinedPrice: 'combinedPrice',
  childPrice: 'childPrice',
  childCombinedPrice: 'childCombinedPrice',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  saleDate: 'saleDate',
  totalAmount: 'totalAmount',
  discountAmount: 'discountAmount',
  finalAmount: 'finalAmount',
  loyaltyPointsEarned: 'loyaltyPointsEarned',
  notes: 'notes',
  isCompleted: 'isCompleted',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  birthMonthDiscount: 'birthMonthDiscount',
  ownShampooDiscount: 'ownShampooDiscount',
  paymentMethod: 'paymentMethod'
};

exports.Prisma.SaleServiceScalarFieldEnum = {
  id: 'id',
  saleId: 'saleId',
  serviceId: 'serviceId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  isChild: 'isChild',
  isCombined: 'isCombined',
  createdAt: 'createdAt'
};

exports.Prisma.SaleStaffScalarFieldEnum = {
  id: 'id',
  saleId: 'saleId',
  staffId: 'staffId',
  serviceId: 'serviceId',
  createdAt: 'createdAt'
};

exports.Prisma.DiscountRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  value: 'value',
  isPercentage: 'isPercentage',
  isActive: 'isActive',
  description: 'description',
  minAmount: 'minAmount',
  maxDiscount: 'maxDiscount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleDiscountScalarFieldEnum = {
  id: 'id',
  saleId: 'saleId',
  discountRuleId: 'discountRuleId',
  discountAmount: 'discountAmount',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerDiscountScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  discountRuleId: 'discountRuleId',
  usedAt: 'usedAt',
  discountAmount: 'discountAmount'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.ServiceCategory = exports.$Enums.ServiceCategory = {
  HAIR_TREATMENTS: 'HAIR_TREATMENTS',
  TWIST_HAIRSTYLE: 'TWIST_HAIRSTYLE',
  CORNROWS_BRAIDS: 'CORNROWS_BRAIDS',
  STRAWSET_CURLS: 'STRAWSET_CURLS',
  STYLING_SERVICE: 'STYLING_SERVICE',
  SPECIAL_OFFERS: 'SPECIAL_OFFERS'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  MOBILE_MONEY: 'MOBILE_MONEY',
  BANK_CARD: 'BANK_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  SIXTH_VISIT: 'SIXTH_VISIT',
  BIRTHDAY_MONTH: 'BIRTHDAY_MONTH',
  LOYALTY_POINTS: 'LOYALTY_POINTS',
  SERVICE_COMBO: 'SERVICE_COMBO',
  BRING_OWN_PRODUCT: 'BRING_OWN_PRODUCT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Customer: 'Customer',
  Service: 'Service',
  Sale: 'Sale',
  SaleService: 'SaleService',
  SaleStaff: 'SaleStaff',
  DiscountRule: 'DiscountRule',
  SaleDiscount: 'SaleDiscount',
  CustomerDiscount: 'CustomerDiscount'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
