generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  name           String
  email          String?
  password       String
  role           Role        @default(STAFF)
  phone          String      @unique
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  profilePicture String?
  staffSales     SaleStaff[]
  sales          Sale[]

  @@map("users")
}

model Customer {
  id            String             @id @default(cuid())
  fullName      String
  gender        Gender
  location      String
  district      String
  province      String
  phone         String?            @unique
  email         String?
  birthDay      Int
  birthMonth    Int
  birthYear     Int?
  loyaltyPoints Int                @default(0)
  totalSpent    Decimal            @default(0) @db.Decimal(10, 2)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  isActive      Boolean            @default(true)
  lastSale      DateTime?
  saleCount     Int                @default(0)
  parentId      String?
  isDependent   Boolean            @default(false)
  discounts     CustomerDiscount[]
  sales         Sale[]
  parent        Customer?          @relation("CustomerDependents", fields: [parentId], references: [id])
  dependents    Customer[]         @relation("CustomerDependents")

  @@map("customers")
}

model Service {
  id                 String          @id @default(cuid())
  name               String          @unique
  category           ServiceCategory
  description        String?
  singlePrice        Decimal         @db.Decimal(10, 2)
  combinedPrice      Decimal?        @db.Decimal(10, 2)
  childPrice         Decimal?        @db.Decimal(10, 2)
  childCombinedPrice Decimal?        @db.Decimal(10, 2)
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  saleServices       SaleService[]

  @@map("services")
}

model Sale {
  id                  String         @id @default(cuid())
  customerId          String
  saleDate            DateTime       @default(now())
  totalAmount         Decimal        @db.Decimal(10, 2)
  discountAmount      Decimal        @default(0) @db.Decimal(10, 2)
  finalAmount         Decimal        @db.Decimal(10, 2)
  loyaltyPointsEarned Int            @default(0)
  notes               String?
  isCompleted         Boolean        @default(false)
  createdById         String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  birthMonthDiscount  Boolean        @default(false)
  ownShampooDiscount  Boolean        @default(false)
  paymentMethod       PaymentMethod  @default(CASH)
  discounts           SaleDiscount[]
  services            SaleService[]
  staff               SaleStaff[]
  createdBy           User           @relation(fields: [createdById], references: [id])
  customer            Customer       @relation(fields: [customerId], references: [id])

  @@map("sales")
}

model SaleService {
  id         String   @id @default(cuid())
  saleId     String
  serviceId  String
  quantity   Int      @default(1)
  unitPrice  Decimal  @db.Decimal(10, 2)
  totalPrice Decimal  @db.Decimal(10, 2)
  isChild    Boolean  @default(false)
  isCombined Boolean  @default(false)
  createdAt  DateTime @default(now())
  sale       Sale     @relation(fields: [saleId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])

  @@map("sale_services")
}

model SaleStaff {
  id        String   @id @default(cuid())
  saleId    String
  staffId   String
  serviceId String?
  createdAt DateTime @default(now())
  sale      Sale     @relation(fields: [saleId], references: [id])
  staff     User     @relation(fields: [staffId], references: [id])

  @@map("sale_staff")
}

model DiscountRule {
  id                String             @id @default(cuid())
  name              String             @unique
  type              DiscountType
  value             Decimal            @db.Decimal(5, 2)
  isPercentage      Boolean            @default(true)
  isActive          Boolean            @default(true)
  description       String?
  minAmount         Decimal?           @db.Decimal(10, 2)
  maxDiscount       Decimal?           @db.Decimal(10, 2)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  customerDiscounts CustomerDiscount[]
  saleDiscounts     SaleDiscount[]

  @@map("discount_rules")
}

model SaleDiscount {
  id             String       @id @default(cuid())
  saleId         String
  discountRuleId String
  discountAmount Decimal      @db.Decimal(10, 2)
  createdAt      DateTime     @default(now())
  discountRule   DiscountRule @relation(fields: [discountRuleId], references: [id])
  sale           Sale         @relation(fields: [saleId], references: [id])

  @@map("sale_discounts")
}

model CustomerDiscount {
  id             String       @id @default(cuid())
  customerId     String
  discountRuleId String
  usedAt         DateTime     @default(now())
  discountAmount Decimal      @db.Decimal(10, 2)
  customer       Customer     @relation(fields: [customerId], references: [id])
  discountRule   DiscountRule @relation(fields: [discountRuleId], references: [id])

  @@map("customer_discounts")
}

enum Role {
  ADMIN
  MANAGER
  STAFF
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ServiceCategory {
  HAIR_TREATMENTS
  TWIST_HAIRSTYLE
  CORNROWS_BRAIDS
  STRAWSET_CURLS
  STYLING_SERVICE
  SPECIAL_OFFERS
}

enum DiscountType {
  SIXTH_VISIT
  BIRTHDAY_MONTH
  LOYALTY_POINTS
  SERVICE_COMBO
  BRING_OWN_PRODUCT
}

enum PaymentMethod {
  CASH
  MOBILE_MONEY
  BANK_CARD
  BANK_TRANSFER
}
